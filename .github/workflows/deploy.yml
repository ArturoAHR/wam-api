name: Deploy
on: 
  push:
    branches: [main]
  pull_request:
    branches: [ develop ] # Remove once the pipeline is fully functional
jobs:
  deploy:
    environment: Production
    name: Deploy API
    runs-on: ubuntu-latest

    steps:
      - name: Get runner machine IP
        run: |
          echo "GITHUB_RUNNER_IP=$(curl -s https://ipinfo.io/ip)" >> $GITHUB_ENV

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Whitelist runner IP address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${GITHUB_RUNNER_IP}/32

      - name: Add EC2 instance to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOSTNAME }} >> ~/.ssh/known_hosts

      - name: Clone repository
        uses: actions/checkout@v4 
      
      - name: Generate .env file
        uses: ./.github/workflows/generate-env
        with:
          environment: production
          database-host: ${{ secrets.DATABASE_HOST }}
          database-port: ${{ secrets.DATABASE_PORT }}
          database-name: ${{ secrets.DATABASE_NAME }}
          database-user: ${{ secrets.DATABASE_USER }}
          database-password: ${{ secrets.DATABASE_PASSWORD }}
          aws-ec2-ssh-private-key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          aws-ec2-hostname: ${{ secrets.AWS_EC2_HOSTNAME }}
          aws-ec2-user-name: ${{ secrets.AWS_EC2_USER_NAME }}

      - name: Pull Image and Deploy
        run: |
          echo "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
          ssh -i private_key ${{ secrets.AWS_EC2_USER_NAME }}@${{ secrets.AWS_EC2_HOSTNAME}} '
          
          echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
          | docker login \
          --username AWS \
          --password-stdin ${{ secrets.AWS_ECR_URL }}
          
          docker stop wam-api
          docker rm wam-api
          docker pull ${{ secrets.AWS_ECR_URL}}/${{ secrets.AWS_ECR_IMAGE_NAME }}
          docker run -d \
          -p 3000:3000 \
          --name wam-api \
          --env-file ~/wam-api/.env \
          ${{ secrets.AWS_ECR_URL }}/${{ secrets.AWS_ECR_IMAGE_NAME }}
          '
          

      - name: revoke runner ip address
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${GITHUB_RUNNER_IP}/32

